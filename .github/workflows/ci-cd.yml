name: MLOps CI-CD Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  train-and-serve:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Set up Miniconda
      uses: goanpeca/setup-miniconda@v2
      with:
        environment-file: MLProject/conda.yaml
        activate-environment: breast_cancer_env

    - name: Install MLflow and dependencies
      shell: bash -l {0}
      run: |
        conda activate breast_cancer_env
        pip install mlflow dagshub

    - name: Train Model using MLflow Project
      working-directory: ./MLProject
      shell: bash -l {0}
      env:
        MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
        MLFLOW_TRACKING_USERNAME: ${{ secrets.MLFLOW_TRACKING_USERNAME }}
        MLFLOW_TRACKING_PASSWORD: ${{ secrets.MLFLOW_TRACKING_PASSWORD }}
      run: |
        conda activate breast_cancer_env
        mlflow run . -P n_estimators=150 -P max_depth=12
        echo "LATEST_RUN_ID=$(mlflow runs list --experiment-name BreastCancer_RF_Model --max-results 1 --order-by start_time DESC --output-format json | jq -r '.[0].run_id')" >> $GITHUB_ENV

    - name: Save Model Artifacts
      shell: bash -l {0}
      working-directory: ./MLProject
      run: |
        conda activate breast_cancer_env
        # Download model dari MLflow
        mlflow artifacts download -r ${{ env.LATEST_RUN_ID }} --dst-path ./artifacts
        
        # Buat folder untuk artifacts
        mkdir -p model_artifacts
        cp -r artifacts/* model_artifacts/
        cp model.pkl model_artifacts/ 2>/dev/null || true
        cp metrics.json model_artifacts/ 2>/dev/null || true
        
        # Buat metadata file
        echo "{\"run_id\": \"${{ env.LATEST_RUN_ID }}\", \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\", \"model_name\": \"BreastCancer_RF_Model\"}" > model_artifacts/metadata.json

    - name: Upload Artifacts to GitHub
      uses: actions/upload-artifact@v4
      with:
        name: breast-cancer-model-artifacts-${{ github.sha }}
        path: MLProject/model_artifacts/
        retention-days: 30

    - name: Upload to Google Drive
      uses: adityak74/google-drive-upload-git-action@main
      with:
       credentials: ${{ secrets.GOOGLE_DRIVE_CREDENTIALS }}
       filename: "model_artifacts.zip"
       folderId: ${{ secrets.GOOGLE_DRIVE_FOLDER_ID }}
       name: "breast-cancer-model-${{ github.sha }}.zip"
       overwrite: "true"
    - name: Generate MLflow Dockerfile
      shell: bash -l {0}
      working-directory: ./MLProject
      env:
        MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
        MLFLOW_TRACKING_USERNAME: ${{ secrets.MLFLOW_TRACKING_USERNAME }}
        MLFLOW_TRACKING_PASSWORD: ${{ secrets.MLFLOW_TRACKING_PASSWORD }}
      run: |
        conda activate breast_cancer_env
        
        # Gunakan MLflow untuk generate Dockerfile (seperti saran reviewer)
        mlflow models generate-dockerfile -m runs:/${{ env.LATEST_RUN_ID }}/model -d ./docker_mlflow
        
        # Atau bisa menggunakan build-docker langsung
        # mlflow models build-docker -m runs:/${{ env.LATEST_RUN_ID }}/model -n breast-cancer-mlflow:latest

    - name: Build MLflow Docker Image
      working-directory: ./MLProject/docker_mlflow
      run: |
        # Build menggunakan Dockerfile yang di-generate MLflow
        docker build -t breast-cancer-mlflow:latest .

    - name: Build Custom API Docker Image (fallback)
      working-directory: ./MLProject
      run: |
        # Build juga custom API sebagai alternatif
        docker build -t breast-cancer-api:latest .

    - name: Log in to Docker Hub
      run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

    - name: Push Docker Images to Docker Hub
      run: |
        # Push MLflow standard image
        docker tag breast-cancer-mlflow:latest ${{ secrets.DOCKER_USERNAME }}/breast-cancer-mlflow:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/breast-cancer-mlflow:latest
        
        # Push custom API image
        docker tag breast-cancer-api:latest ${{ secrets.DOCKER_USERNAME }}/breast-cancer-api:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/breast-cancer-api:latest
        
        # Tag dengan commit SHA juga
        docker tag breast-cancer-mlflow:latest ${{ secrets.DOCKER_USERNAME }}/breast-cancer-mlflow:${{ github.sha }}
        docker push ${{ secrets.DOCKER_USERNAME }}/breast-cancer-mlflow:${{ github.sha }}
    - name: Test MLflow Model Serving
      shell: bash -l {0}
      working-directory: ./MLProject
      env:
        MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
        MLFLOW_TRACKING_USERNAME: ${{ secrets.MLFLOW_TRACKING_USERNAME }}
        MLFLOW_TRACKING_PASSWORD: ${{ secrets.MLFLOW_TRACKING_PASSWORD }}
      run: |
        conda activate breast_cancer_env
        
        # Start MLflow model serving di background
        mlflow models serve -m runs:/${{ env.LATEST_RUN_ID }}/model -h 0.0.0.0 -p 5000 &
        SERVER_PID=$!
        
        # Wait for server to start
        sleep 10
        
        # Test serving dengan sample data
        curl -X POST -H "Content-Type: application/json" \
          -d '{"dataframe_split": {"columns": ["mean_radius", "mean_texture", "mean_perimeter", "mean_area", "mean_smoothness"], "data": [[14.0, 19.0, 94.0, 594.0, 0.09]]}}' \
          http://localhost:5000/invocations || echo "Serving test completed"
        
        # Stop server
        kill $SERVER_PID || true

    - name: Create Serving Documentation
      shell: bash -l {0}
      working-directory: ./MLProject
      run: |
        # Buat dokumentasi cara serving
        cat > SERVING_GUIDE.md << EOF
        # Model Serving Guide
        
        ## MLflow Serving (Recommended)
        \`\`\`bash
        mlflow models serve -m runs/${{ env.LATEST_RUN_ID }}/model -h 0.0.0.0 -p 5000
        \`\`\`
        
        ## Docker Serving
        \`\`\`bash
        docker run -p 5000:8080 ${{ secrets.DOCKER_USERNAME }}/breast-cancer-mlflow:latest
        \`\`\`
        
        ## API Testing
        \`\`\`bash
        curl -X POST -H "Content-Type: application/json" \
          -d '{"dataframe_split": {"columns": ["mean_radius", "mean_texture", "mean_perimeter", "mean_area", "mean_smoothness"], "data": [[14.0, 19.0, 94.0, 594.0, 0.09]]}}' \
          http://localhost:5000/invocations
        \`\`\`
        
        ## Model Info
        - Run ID: ${{ env.LATEST_RUN_ID }}
        - Model Registry: BreastCancer_RF_Model
        - Docker Images: 
          - MLflow Standard: ${{ secrets.DOCKER_USERNAME }}/breast-cancer-mlflow:latest
          - Custom API: ${{ secrets.DOCKER_USERNAME }}/breast-cancer-api:latest
        EOF

    - name: Upload Serving Documentation
      uses: actions/upload-artifact@v4
      with:
        name: serving-documentation
        path: MLProject/SERVING_GUIDE.md