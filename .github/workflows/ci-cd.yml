name: MLOps CI-CD Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  train-and-serve:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Set up Miniconda
      uses: goanpeca/setup-miniconda@v2
      with:
        environment-file: MLProject/conda.yaml
        activate-environment: breast_cancer_env

    - name: Cache Conda and pip
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/.conda
        key: ${{ runner.os }}-conda-pip-${{ hashFiles('MLProject/conda.yaml') }}
        restore-keys: |
          ${{ runner.os }}-conda-pip

    - name: Install MLflow and dependencies
      shell: bash -l {0}
      run: |
        pip install --upgrade mlflow dagshub jq
        mlflow --version || { echo "MLflow installation failed"; exit 1; }

    - name: Start MLflow Tracking Server
      working-directory: ./MLProject
      shell: bash -l {0}
      run: |
        nohup mlflow server \
          --backend-store-uri sqlite:///mlflow.db \
          --default-artifact-root $(pwd)/mlruns \
          --host 0.0.0.0 \
          --port 5000 > mlflow_server.log 2>&1 &
        # Ubah bagian sleep menjadi pengecekan berulang
        for i in {1..10}; do
          if curl -I http://localhost:5000 2>/dev/null | grep "200 OK"; then
            echo "MLflow server is up!"
            break
          fi
          echo "Waiting for MLflow server..."
          sleep 3
        done
        if ! curl -I http://localhost:5000 2>/dev/null | grep "200 OK"; then
           echo "MLflow server failed to start. Debugging logs:"
           cat mlflow_server.log
           netstat -tuln
           ps aux | grep mlflow
           exit 1
         fi

    - name: Train Model using MLflow Project
      working-directory: ./MLProject
      shell: bash -l {0}
      env:
        MLFLOW_TRACKING_URI: http://localhost:5000
        MLFLOW_TRACKING_USERNAME: ${{ secrets.MLFLOW_TRACKING_USERNAME }}
        MLFLOW_TRACKING_PASSWORD: ${{ secrets.MLFLOW_TRACKING_PASSWORD }}
        MLFLOW_EXPERIMENT_NAME: BreastCancerExperiment
      run: |
        EXPERIMENT_NAME="BreastCancerExperiment"
        EXPERIMENT_ID=$(mlflow experiments search | awk -v name="$EXPERIMENT_NAME" '$2 == name {print $1}')
        if [ -z "$EXPERIMENT_ID" ]; then
          echo "Experiment $EXPERIMENT_NAME not found. Creating it."
          if ! mlflow experiments create --experiment-name "$EXPERIMENT_NAME"; then
            echo "Experiment creation failed. Exiting."
            exit 1
          fi
          EXPERIMENT_ID=$(mlflow experiments search | awk -v name="$EXPERIMENT_NAME" '$2 == name {print $1}')
        fi
        if [ -z "$EXPERIMENT_ID" ]; then
          echo "Failed to retrieve or create experiment. Exiting."
          exit 1
        fi
        echo "EXPERIMENT_ID=$EXPERIMENT_ID"
        echo "Running MLflow Project..."
        mlflow run . -P n_estimators=150 -P max_depth=12 || {
          echo "MLflow run failed. Debugging logs:"
          cat mlflow_server.log
          exit 1
        }
    - name: Set Latest Run ID
      working-directory: ./MLProject
      shell: bash -l {0}
      env:
        MLFLOW_TRACKING_URI: http://localhost:5000
        MLFLOW_TRACKING_USERNAME: ${{ secrets.MLFLOW_TRACKING_USERNAME }}
        MLFLOW_TRACKING_PASSWORD: ${{ secrets.MLFLOW_TRACKING_PASSWORD }}
      run: |
        EXPERIMENT_NAME="BreastCancerExperiment"
        EXPERIMENT_ID=$(mlflow experiments search | awk -v name="$EXPERIMENT_NAME" '$2 == name {print $1}')
        if [ -z "$EXPERIMENT_ID" ]; then
          echo "Experiment $EXPERIMENT_NAME not found. Creating it."
          if ! mlflow experiments create --experiment-name "$EXPERIMENT_NAME"; then
            echo "Experiment creation failed. Debug info:"
            mlflow experiments list
            cat mlflow_server.log
            exit 1
          fi
          EXPERIMENT_ID=$(mlflow experiments search | awk -v name="$EXPERIMENT_NAME" '$2 == name {print $1}')
        fi
        if [ -z "$EXPERIMENT_ID" ]; then
          echo "Failed to retrieve or create experiment. Exiting."
          exit 1
        fi

        echo "EXPERIMENT_ID: $EXPERIMENT_ID"
        mlflow runs list --experiment-id $EXPERIMENT_ID

        # Perbaikan parsing Run ID
        LATEST_RUN_ID=$(mlflow runs list --experiment-id $EXPERIMENT_ID | awk 'NF && !/^-+/ && !/^Date/ {print $NF}' | head -n 1)
        if [ -z "$LATEST_RUN_ID" ] || [[ "$LATEST_RUN_ID" =~ ^[-]+$ ]]; then
          echo "Tidak ada run ID ditemukan atau run ID tidak valid. Pastikan MLflow run benar-benar sukses dijalankan."
          mlflow runs list --experiment-id $EXPERIMENT_ID
          cat mlflow_server.log
          exit 1
        fi
        echo "LATEST_RUN_ID=$LATEST_RUN_ID"
        echo "LATEST_RUN_ID=$LATEST_RUN_ID" >> $GITHUB_ENV
        
    - name: Debug cek isi mlruns
      working-directory: ./MLProject
      shell: bash -l {0}
      run: |
        echo "Isi folder mlruns:"
        ls -R mlruns

    - name: Download Artifacts and Check Metrics
      working-directory: ./MLProject
      shell: bash -l {0}
      run: |
        if [ -z "${{ env.LATEST_RUN_ID }}" ]; then
            echo "LATEST_RUN_ID is not set. Exiting."
            exit 1
        fi

        if ! mlflow artifacts download \
          --run-id "${{ env.LATEST_RUN_ID }}" \
          --artifact-path "artifacts" \
          --dst-path "./artifacts"; then
            echo "Failed to download artifacts. Exiting."
            exit 1
        fi

        cat ./artifacts/metrics.json
        METRIC=$(jq '.accuracy' ./artifacts/metrics.json)
        echo "Model Accuracy: $METRIC"
        if (( $(echo "$METRIC < 0.85" | bc -l) )); then
            echo "Model accuracy is too low. Failing pipeline."
            exit 1
        fi

    - name: Prepare Artifacts
      working-directory: ./MLProject
      run: |
        mkdir -p model_artifacts
        cp -r artifacts/* model_artifacts/
        cp model.pkl model_artifacts/ 2>/dev/null || true
        echo "{\"run_id\": \"${{ env.LATEST_RUN_ID }}\", \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\", \"model_name\": \"BreastCancer_RF_Model\"}" > model_artifacts/metadata.json
        zip -r model_artifacts.zip model_artifacts

    - name: Upload Artifacts to GitHub
      uses: actions/upload-artifact@v4
      with:
        name: breast-cancer-model-artifacts-${{ github.sha }}
        path: MLProject/model_artifacts/
        retention-days: 30

    - name: Upload to Google Drive
      uses: adityak74/google-drive-upload-git-action@main
      with:
        credentials: ${{ secrets.GOOGLE_DRIVE_CREDENTIALS }}
        filename: "model_artifacts.zip"
        folderId: ${{ secrets.GOOGLE_DRIVE_FOLDER_ID }}
        name: "breast-cancer-model-${{ github.sha }}.zip"
        overwrite: "true"

    - name: Generate MLflow Dockerfile
      working-directory: ./MLProject
      run: mlflow models generate-dockerfile -m runs:/${{ env.LATEST_RUN_ID }}/model -d ./docker_mlflow

    - name: Build and Push Docker Images
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/breast-cancer-mlflow:latest ./MLProject/docker_mlflow
        docker build -t ${{ secrets.DOCKER_USERNAME }}/breast-cancer-api:latest ./MLProject
        echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
        docker push ${{ secrets.DOCKER_USERNAME }}/breast-cancer-mlflow:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/breast-cancer-api:latest

    - name: Test Model Serving
      working-directory: ./MLProject
      run: |
        mlflow models serve -m runs:/${{ env.LATEST_RUN_ID }}/model -h 0.0.0.0 -p 5000 &
        SERVER_PID=$!
        sleep 10
        curl -X POST -H "Content-Type: application/json" \
          -d '{"dataframe_split": {"columns": ["mean_radius", "mean_texture", "mean_perimeter", "mean_area", "mean_smoothness"], "data": [[14.0, 19.0, 94.0, 594.0, 0.09]]}}' \
          http://localhost:5000/invocations || echo "Serving test completed"
        kill $SERVER_PID || true

    - name: Create Serving Documentation
      working-directory: ./MLProject
      run: |
        cat > SERVING_GUIDE.md << EOF
        # Model Serving Guide
        ## MLflow Serving
        mlflow models serve -m runs/${{ env.LATEST_RUN_ID }}/model -h 0.0.0.0 -p 5000
        ## Docker Serving
        docker run -p 5000:8080 ${{ secrets.DOCKER_USERNAME }}/breast-cancer-mlflow:latest
        ## Test with curl
        curl -X POST -H "Content-Type: application/json" -d '{"dataframe_split": {"columns": ["mean_radius", "mean_texture", "mean_perimeter", "mean_area", "mean_smoothness"], "data": [[14.0, 19.0, 94.0, 594.0, 0.09]]}}' http://localhost:5000/invocations
        EOF
